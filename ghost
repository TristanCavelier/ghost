#!/bin/sh
# Version 2.3.3
version="2.3.3"

#  Copyright (c) 2014, 2017, 2020 Tristan Cavelier <t.cavelier@free.fr>
#
#  This program is free software. It comes without any warranty, to
#  the extent permitted by applicable law. You can redistribute it
#  and/or modify it under the terms of the Do What The Fuck You Want
#  To Public License, Version 2, as published by Sam Hocevar. See
#  below for more details.
#
#  ___________________________________________________________________
# |                                                                   |
# |           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE             |
# |                   Version 2, December 2004                        |
# |                                                                   |
# |Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>                   |
# |                                                                   |
# |Everyone is permitted to copy and distribute verbatim or modified  |
# |copies of this license document, and changing it is allowed as long|
# |as the name is changed.                                            |
# |                                                                   |
# |           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE             |
# |  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION  |
# |                                                                   |
# | 0. You just DO WHAT THE FUCK YOU WANT TO.                         |
# |___________________________________________________________________|

# dependencies:
# awk
# basename
# cut
# dd
# echo
# grep
# gzip
# head
# ls
# lsblk
# mkswap
# partclone (optional)
# parted
# printf
# read
# sed
# sort
# stat
# zcat

cmd=$(basename "$0")
usage="Usage:
    $cmd list                                # show a list of connected block devices
    $cmd restore [OPTION] [FOLDER]           # restore disks/partitions from files in FOLDER
    $cmd backup [OPTION] DEV [FOLDER]        # backup entire disk/part in FOLDER

    $cmd restore [OPTION] [FILES_OR_FOLDERS] # restore headers/partitions from FILE
    $cmd [OPTION]

  DEV can be either DISK or PART
  DISK is disk path (ex: /dev/sda)
  PART is partition path (ex: /dev/sda1)
  FOLDER is folder path (default is current working directory)
  FILE is file path

  OPTION:
    -v, --version                  # print the program version and exit
    -h, --help                     # print this help and exit
        --info                     # print details about what this program does

  backup OPTION:
    -n, --dry-run                  # just output backup commands
    -Z, --no-gzip                  # tells to not use gzip
        --headers                  # backup disk headers only
        --parts                    # backup disk partitions only
        --dd                       # use \`dd\` only
        --partclone                # use \`partclone\` only

  restore OPTION:
    -n, --dry-run                  # just output restoration commands
"
info="\
For \`$cmd restore\`, it will look for this kind of files:
    ./DISK.start.bin
    ./DEV.dd.bin[.gz]
    ./PART.partclone.bin[.gz]
    ./PART.[LABEL.]UUID.mkswap (which is empty)

For \`$cmd backup -- DISK\`, it will create:
    ./DISK.parted.txt
    ./DISK.start.bin (maximum 1MiB)
    ./DISK.end.bin (maximum 1MiB)
    ./PART.partclone.bin.gz (or PART.dd.bin.gz if FSTYPE is not supported)
    ./PART.[LABEL.]UUID.mkswap

For \`$cmd backup --headers -- DISK\`, it will create:
    ./DISK.parted.txt
    ./DISK.start.bin (maximum 1MiB)
    ./DISK.end.bin (maximum 1MiB)

For \`$cmd backup -- PART\`, it will create:
    ./PART.partclone.bin.gz (or PART.dd.bin.gz if FSTYPE is not supported)
  or
    ./PART.[LABEL.]UUID.mkswap

(\`./\` can also be \`FOLDER/\`.)

Command used to get DISK.parted.txt: parted -s DISK -- unit B print > DISK.parted.txt

Command used to get DISK.start.bin: dd if=DISK of=DISK.start.bin count=START_SECTOR ibs=PHYSICAL_SECTOR_SIZE
restore with: dd if=DISK.start.bin of=DISK

Command used to get DISK.end.bin: dd if=DISK of=DISK.end.bin skip=START_SECTOR ibs=PHYSICAL_SECTOR_SIZE
restore with: dd if=DISK.end.bin of=DISK seek=DISK_SIZE_MINUS_BIN_SIZE ibs=1

Command used to get DEV.dd.bin: dd if=DEV of=DEV.dd.bin
restore with: dd if=DEV.dd.bin of=DEV

Command used to get DEV.dd.bin.gz: dd if=DEV | gzip -c > DEV.dd.bin.gz
restore with: zcat DEV.dd.bin.gz | dd of=DEV

Command used to get PART.partclone.bin: partclone.FSTYPE -c -s PART > PART.partclone.bin
restore with: partclone.restore -o PART < PART.partclone.bin

Command used to get PART.partclone.bin.gz: partclone.FSTYPE -c -s PART | gzip -c > PART.partclone.bin.gz
restore with: zcat PART.partclone.bin.gz | partclone.restore -o PART

Command used to get PART.[LABEL.]UUID.mkswap: echo -n > PART.[LABEL.]UUID.mkswap
restore with: mkswap [-L LABEL] -U UUID PART
"

#         --tar                      # XXX
#     ./PART.[LABEL.]FSTYPE.UUID.tar.gz  (see ghost-tar)
# Command used to get PART.[LABEL.]FSTYPE.UUID.tar.gz: tar czf PART.[LABEL.]FSTYPE.UUID.tar.gz -X MOUNTDIRS -C MOUNTPOINT FILES -C /tmp/<tmp> MOUNTDIRSREFERENCES
# restore with: mkfs.FSTYPE [-L LABEL] -U UUID PART && tar xf PART.[LABEL.]FSTYPE.UUID.tar.gz -C MOUNTPOINT
#
# MOUNTDIRREFERENCES are folders that reflect original folders which are used as mountpoints... however, I don't know how to get information about original folder
#     mkdir mirrorfolder
#     chmod --reference=originalfolder mirrorfolder
#     chown --reference=originalfolder mirrorfolder

seeusage="Run \`$cmd --help\` to get more informations."
unknown_errno=4
invalid_request_errno=3
unknown_command_errno=3
unknown_action_errno=3
unknown_option_errno=3
unknown_device_type_errno=2
invalid_partition_errno=2
process_stopped_errno=1
process_error_errno=1

nl="
"
print() { printf "%s" "$*" ; }
echoo() {
    [ "$1" = -n ] && { shift ; printf "%s" "$*" ; return $? ; }
    printf "%s$nl" "$*"
}
log() { echoo "$@" ;}
info() { tput setaf 6 ; tput bold ; print '->  ' ; echoo "$@" ; tput sgr0 ;}
warn() { ( tput setaf 3 ; tput bold ; print '/!\ ' ; echoo "$@" ; tput sgr0 ; ) 1>&2 ; }
err() { ( tput setaf 1 ; tput bold ; print 'ERR ' ; echoo "$@" ; tput sgr0 ; ) 1>&2 ; }
noout() { "$@" >/dev/null 2>&1 ; }

IFS=

######################################################################
# Chars forbidden in ntfs "/\?<>:
# Name separator is .
# Name escape char pattern is %HH (where H is a hexadecimal digit)

encode_name_component() {
    print "$1" | sed \
        -e 's,%,%25,g' \
        -e 's,",%22,g' \
        -e 's,/,%2F,g' \
        -e 's,?,%5C,g' \
        -e 's,<,%3F,g' \
        -e 's,>,%3C,g' \
        -e 's,:,%3A,g' \
        -e 's,\.,%2E,g' \
        -e 's, ,%20,g'
}

decode_name_component() {
    print "$1" | sed \
        -e 's,%20, ,g' \
        -e 's,%2e,.,gi' \
        -e 's,%3a,:,gi' \
        -e 's,%3c,>,gi' \
        -e 's,%3f,<,gi' \
        -e 's,%5c,?,gi' \
        -e 's,%2f,/,gi' \
        -e 's,%22,",g' \
        -e 's,%25,%,g'
}

quote() { print \' ; print "$1" | sed s,\',\'\\\\\'\',g ; print \' ; }
evallines() { local line ; print "$1$nl" | while read -r line ; do eval " $line" || warn "Exited with code $?" ; done ; }
envv() {
    # like `env` but we can use functions defined in this script
    local locals
    while [ $# != 0 ] ; do
        print "$1" | noout grep '^[a-zA-Z_][a-zA-Z0-9_]*=.*$' || break
        locals="$locals $(quote "$1")"
        shift
    done
    [ "$locals" ] && eval "local$locals"
    "$@"
}

grep_disk_size() {
    # parted -s /dev/sdx -- unit B print | cmd
    grep -E '^Disk .*: [0-9]+B$' | grep -Eo '[0-9]+'
}

make_restore_cmds_from_file() {
    # envv ADD_SORT_INDEX= IGNORE_UNKNOWN_FILES= FORBID_SUB_FOLDERS= FILE= cmd
    local basename=$(basename "$FILE") qFILE=$(quote "$FILE") qdev disk disksize qdisk qpart qlabel quuid filesize
    if [ -d "$FILE" ] ; then
        [ "$FORBID_SUB_FOLDERS" ] && return 0
        envv FOLDER="$FILE" FORBID_SUB_FOLDERS=1 make_restore_cmds_from_folder
        return $?
    fi
    # DISK.start.bin
    if print "$basename" | grep -E '^[^.]+\.start\.bin$' >/dev/null ; then
        qdisk=$(quote "$(decode_name_component "$(print "$basename" | cut -d . -f 1)")")
        [ "$ADD_SORT_INDEX" ] && print 'a '
        echo "dd if=$qFILE of=$qdisk && sleep 1s"
    # DISK.end.bin
    elif print "$basename" | grep -E '^[^.]+\.end\.bin$' >/dev/null ; then
        disk=$(decode_name_component "$(print "$basename" | cut -d . -f 1)")
        disksize=$(parted -s "$disk" -- unit B print | grep_disk_size) || { err "Cannot extract disk size with \`parted\`" ; return $process_error_errno ; }
        filesize=$(stat -c %s "$basename") || { err "Cannot print file size with \`stat\`" ; return $process_error_errno ; }
        qdisk=$(quote "$disk")
        [ "$ADD_SORT_INDEX" ] && print 'b '
        echo "dd if=$qFILE of=$qdisk oflag=seek_bytes seek=$(($disksize - $filesize)) && sleep 1s"
    # DEV.dd.bin[.gz]
    elif print "$basename" | grep -E '^[^.]+\.dd\.bin(\.gz)?$' >/dev/null ; then
        qdev=$(quote "$(decode_name_component "$(print "$basename" | cut -d . -f 1)")")
        [ "$ADD_SORT_INDEX" ] && print 'c '
        if print "$basename" | grep '\.gz$' >/dev/null ; then
            echo "zcat $qFILE | dd of=$qdev && sleep 1s"
        else
            echo "dd if=$qFILE of=$qdev && sleep 1s"
        fi
    # PART.partclone.bin[.gz]
    elif print "$basename" | grep -E '^[^.]+\.partclone.bin(\.gz)?$' >/dev/null ; then
        qpart=$(quote "$(decode_name_component "$(print "$basename" | cut -d . -f 1)")")
        [ "$ADD_SORT_INDEX" ] && print 'f '
        if print "$basename" | grep '\.gz$' >/dev/null ; then
            echo "zcat $qFILE | partclone.restore -o $qpart"
        else
            echo "partclone.restore -o $qpart < $qFILE"
        fi
    # PART.[LABEL.]UUID.mkswap (which is empty)
    elif print "$basename" | grep -E '^[^.]+\.[^.]+\.[^.]+.mkswap' >/dev/null ; then
        qpart=$(quote "$(decode_name_component "$(print "$basename" | cut -d . -f 1)")")
        qlabel=$(quote "$(decode_name_component "$(print "$basename" | cut -d . -f 2)")")
        quuid=$(quote "$(decode_name_component "$(print "$basename" | cut -d . -f 3)")")
        [ "$ADD_SORT_INDEX" ] && print 'g '
        echo "mkswap -L $qlabel -U $quuid $qpart"
    elif print "$basename" | grep -E '^[^.]+\.[^.]+.mkswap' >/dev/null ; then
        qpart=$(quote "$(decode_name_component "$(print "$basename" | cut -d . -f 1)")")
        quuid=$(quote "$(decode_name_component "$(print "$basename" | cut -d . -f 2)")")
        [ "$ADD_SORT_INDEX" ] && print 'g '
        echo "mkswap -U $quuid $qpart"
    else
        if [ -z "$IGNORE_UNKNOWN_FILES" ] ; then
            err "Don't know how to restore \`$FILE\`"
            return $unknown_action_errno
        fi
    fi
}

make_restore_cmds_from_folder() {
    # envv FOLDER= cmd
    local _status line
    ls -1 "$FOLDER" | while IFS= read -r line ; do
        envv ADD_SORT_INDEX=1 IGNORE_UNKNOWN_FILES=1 FORBID_SUB_FOLDERS=1 FILE="$line" make_restore_cmds_from_file
    done | sort | cut -d ' ' -f 2-
}

main_restore() {
    local dry_run answer
    while [ $# != 0 ] ; do
        case "$1" in
            -n|--dry-run) dry_run=1 ; shift ;;
            --) shift ;;
            -*) err "Unkown option \`$1\`$nl$seeusage" ; return $unknown_option_errno ;;
            *) break ;;
        esac
    done
    if [ $# = 0 ] ; then
        restore_cmds=$(envv FOLDER=. make_restore_cmds_from_folder)
    else
        restore_cmds=$(for p in "$@" ; do envv FILE="$p" make_restore_cmds_from_file ; done) || return $?
    fi
    [ -z "$restore_cmds" ] && { warn "Nothing to backup" ; return $process_stopped_errno ; }
    print "$restore_cmds$nl"
    [ $dry_run ] && return 0
    print "${nl}Start restore? [y/N] "
    read -r answer
    [ "$answer" != y ] && { warn "Aborting" ; return $process_stopped_errno ; }
    evallines "$restore_cmds"
}

blk_label() { lsblk -rno LABEL "$1" | head -n 1 ; }
blk_uuid() { lsblk -rno UUID "$1" | head -n 1 ; }
blk_uuids() { lsblk -rno UUID "$1" ; }
blk_type() { lsblk -rno TYPE "$1" | head -n 1 ; }
blk_fstype() { lsblk -rno FSTYPE "$1" | head -n 1 ; }
blk_logsectors() { lsblk -rno LOG-SEC "$1" | head -n 1 ; }
ls_part_of_disk() { lsblk -rno KNAME,TYPE "$1" | grep 'part$' | grep -E -o '^\S+' | sed 's,^,/dev/,g' ; }
grep_physical_sector_size() {
    # parted -s /dev/sdx -- unit B print | cmd
    grep -E '^Sector size \(logical/physical\): [0-9]+B/[0-9]+B$' | head -n 1 | sed 's,^Sector size (logical/physical): [0-9]\+B/\([0-9]\+\)B$,\1,' | grep -E '^[0-9]+$'
}
grep_partition_table_type() {
    # parted -s /dev/sdx -- print | cmd
    grep -E '^Partition Table: (gpt|msdos)$' | head -n 1 | sed 's,^Partition Table: \([a-z]\+\)$,\1,' | grep -E '^[a-z]+$'
}
grep_start_location() {
    # parted -s /dev/sdx -- unit B print | cmd
    awk 'BEGIN { out=0 } /^$/ { out=0 } { if (out) { print $2 } } /^Number/ { out=1 }' | sed 's,B$,,g' | sort -n | head -n 1 | grep -E '^[0-9]+$'
}
grep_end_location() {
    # parted -s /dev/sdx -- unit B print | cmd
    awk 'BEGIN { out=0 } /^$/ { out=0 } { if (out) { print $3 } } /^Number/ { out=1 }' | sed 's,B$,,g' | sort -n -r | head -n 1 | grep -E '^[0-9]+$'
}

make_backup_cmds_for_dd_entire_disk() {
    # envv USE_GZIP= DISK= FOLDER= cmd
    if [ "$USE_GZIP" ] ; then
        echo "dd if=$(quote "$DISK") | gzip -c > $(quote "$FOLDER/$(encode_name_component "$DISK").dd.bin.gz")"
    else
        echo "dd if=$(quote "$DISK") > $(quote "$FOLDER/$(encode_name_component "$DISK").dd.bin")"
    fi
}

make_backup_cmds_for_disk() {
    # envv USE_ONLY_CMD= BACKUP_SELECTION= cmd
    case "${BACKUP_SELECTION:-default}" in
        default|all)
            if [ "$USE_ONLY_CMD" = dd ] ; then
                envv make_backup_cmds_for_dd_entire_disk
            else
                envv make_backup_cmds_for_disk_headers && make_backup_cmds_for_disk_parts
            fi
            ;;
        headers) envv make_backup_cmds_for_disk_headers ;;
        parts) envv make_backup_cmds_for_disk_parts ;;
        *) err "Unknown backup selection \`$BACKUP_SELECTION\`" ; return $invalid_request_errno ;;
    esac
}

make_backup_cmds_for_disk_headers() {
    # envv USE_GZIP= DISK= FOLDER= cmd
    local eDISK=$(encode_name_component "$DISK") qDISK=$(quote "$DISK") partedoutput start startsector startsectorsize end endsector endsectorsize disksize
    partedoutput=$(parted -s "$DISK" -- unit B print) || { err "Cannot print disk details with \`parted\`" ; return $process_error_errno ; }
    start=$(print "$partedoutput" | grep_start_location) || { err "Cannot retrieve partition start locations" ; return $process_error_errno ; }
    end=$(print "$partedoutput" | grep_end_location) || { err "Cannot retrieve partition end locations" ; return $process_error_errno ; }
    end=$(($end + 1))
    disksize=$(print "$partedoutput" | grep_disk_size) || { err "Cannot print disk size" ; return $process_error_errno ; }
    startsectorsize=$(print "$partedoutput" | grep_physical_sector_size) || warn "Cannot retrieve physical sector size"
    [ $start -gt 1048576 ] && start=1048576 # maximum 1MiB
    [ $(($disksize - $end)) -gt 1048576 ] && end=$(($disksize - 1048576)) # maximum 1MiB
    [ -z $startsectorsize ] && startsectorsize=1
    endsectorsize=$startsectorsize
    startsector=$(($start / $startsectorsize))
    [ $(($startsector * $startsectorsize)) != $start ] && { startsectorsize=1 ; startsector=$start ; }
    endsector=$(($end / $endsectorsize))
    [ $(($endsector * $endsectorsize)) != $end ] && { endsectorsize=1 ; endsector=$end ; }
    # DISK.parted.txt
    echo "parted -s $qDISK -- unit B print > $(quote "$FOLDER/$eDISK.parted.txt")"
    # DISK.start.bin
    echo "dd if=$qDISK of=$(quote "$FOLDER/$eDISK.start.bin") count=$startsector ibs=$startsectorsize"
    # DISK.end.bin
    echo "dd if=$qDISK of=$(quote "$FOLDER/$eDISK.end.bin") skip=$endsector ibs=$endsectorsize"
}

make_backup_cmds_for_disk_parts() {
    # envv DISK= cmd
    local part
    ls_part_of_disk "$DISK" | while read -r part ; do
        envv PART="$part" BACKUP_SELECTION=default make_backup_cmds_for_part
    done
}

make_backup_cmds_for_part() {
    # envv USE_GZIP= BACKUP_SELECTION= USE_ONLY_CMD= PART= cmd
    [ "${BACKUP_SELECTION:-default}" != default ] && { err "Invalid selection \`$BACKUP_SELECTION\`" ; return $invalid_request_errno ; }
    local ePART=$(encode_name_component "$PART") qPART=$(quote "$PART") fstype=$(blk_fstype "$PART") label elabel uuid
    qePART=$(quote "$ePART")
    # PART.[LABEL.]UUID.mkswap
    if [ "$fstype" = swap ] ; then
        label=$(blk_label "$PART")
        elabel=$(encode_name_component "$label")
        uuid=$(blk_uuid "$PART")
        [ "$uuid" ] || { err "Part \`$PART\` has no uuid" ; return $invalid_partition_errno ; }
        echo "echo -n > $(quote "$FOLDER/$ePART.${elabel:-}${label:+.}$uuid.mkswap")"
    # PART.parclone.bin[.gz]
    elif [ "${USE_ONLY_CMD:-partclone}" = partclone ] && noout which partclone."$fstype" ; then
        if [ "$USE_GZIP" ] ; then
            echo "partclone.$fstype -c -s $qPART | gzip -c > $(quote "$FOLDER/$ePART.partclone.bin.gz")"
        else
            echo "partclone.$fstype -c -s $qPART > $(quote "$FOLDER/$ePART.partclone.bin")"
        fi
    # PART.dd.bin[.gz]
    elif [ "${USE_ONLY_CMD:-dd}" = dd ] ; then
        if [ "$USE_GZIP" ] ; then
            echo "dd if=$qPART | gzip -c > $(quote "$FOLDER/$ePART.dd.bin.gz")"
        else
            echo "dd if=$qPART of=$(quote "$FOLDER/$ePART.dd.bin")"
        fi
    else
        warn "No backup command found for \`$PART\`"
        return $unknown_command_errno
    fi
}

make_backup_cmds() {
    # envv DEV= cmd
    local type=$(blk_type "$DEV" 2>/dev/null)
    case "$type" in
        disk) envv DISK="$DEV" make_backup_cmds_for_disk ;;
        part) envv PART="$DEV" make_backup_cmds_for_part ;;
        '') err "Unknown block device type of \`$DEV\`" ; return $unknown_device_type_errno ;;
        *) err "Unknown block device \`$type\` of \`$DEV\`" ; return $unknown_device_type_errno ;;
    esac
}

main_backup() {
    local use_gzip=1 dry_run backup_selection=default use_only_cmd folder backup_cmds answer
    while [ $# != 0 ] ; do
        case "$1" in
            -n|--dry-run) dry_run=1 ; shift ;;
            -Z|--no-gzip) use_gzip= ; shift ;;
            --headers) backup_selection=headers ; shift ;;
            --parts) backup_selection=parts ; shift ;;
            --dd) use_only_cmd=dd ; shift ;;
            --partclone) use_only_cmd=partclone ; shift ;;
            --) shift ;;
            -*) err "Unkown option \`$1\`$nl$seeusage" ; return $unknown_option_errno ;;
            *) break ;;
        esac
    done
    [ $# = 0 ] && { err "Backup action need at least one parameter: DEV$nl$seeusage" ; return $invalid_request_errno ; }
    folder="$2"
    [ $# -lt 2 ] && folder=.
    backup_cmds=$(envv USE_GZIP=$use_gzip USE_ONLY_CMD=$use_only_cmd BACKUP_SELECTION="$backup_selection" DEV="$1" FOLDER="$folder" make_backup_cmds) || return $?
    [ -z "$backup_cmds" ] && { warn "Nothing to backup" ; return $process_stopped_errno ; }
    print "$backup_cmds$nl"
    [ $dry_run ] && return 0
    print "${nl}Start backup? [y/N] "
    read -r answer
    [ "$answer" != y ] && { warn "Aborting" ; return $process_stopped_errno ; }
    evallines "$backup_cmds"
}

main() {
    while [ $# != 0 ] ; do
        case "$1" in
            -h|--help) log "$usage" ; return 0 ;;
            -v|--version) log "$version" ; return 0 ;;
            --info) log "$info" ; return 0 ;;
            --) shift ; break ;;
            -*) err "Unkown option \`$1\`$nl$seeusage" ; return $unknown_option_errno ;;
            *) break ;;
        esac
    done
    case "$1" in
        list) lsblk -o KNAME,TYPE,FSTYPE,SIZE,LABEL,UUID,MOUNTPOINT ;;
        restore) shift ; main_restore "$@" ;;
        backup) shift ; main_backup "$@" ;;
        '') err "$seeusage" ; return $invalid_request_errno ;;
        *) err "Unknown action \`$1\`$nl$seeusage" ; return $unknown_action_errno ;;
    esac
}
main "$@"
